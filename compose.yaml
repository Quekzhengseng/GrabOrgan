volumes:
  rabbitmq_data:
    name: grabOrgan_rabbitmq_data
  pgdata:
    name: grabOrgan_pgdata

networks:
  grabOrgan-net:
    driver: bridge
    name: grabOrgan-net

services:
  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:17.4
    platform: linux/amd64 # <- required for Mac M1 chip. Otherwise, can remove
    restart: always
    networks:
      - grabOrgan-net
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong/kong-gateway:3.9
    platform: linux/amd64 # <- required for Mac M1 chip. Otherwise, can remove
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - grabOrgan-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong/kong-gateway:3.9
    platform: linux/amd64 # <- required for Mac M1 chip. Otherwise, can remove
    restart: always
    networks:
      - grabOrgan-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    depends_on:
      - kong-migration
    ports: # https://docs.konghq.com/gateway/latest/production/networking/default-ports/
      - "8000:8000" # Takes incoming HTTP traffic from Consumers, and forwards it to upstream Services.
      - "8001:8001" # Admin API. Listens for calls from the command line over HTTP.
      - "8002:8002" # Kong Manager (GUI). Listens for HTTP traffic.
  deck-sync:
    image: kong/deck:latest
    volumes:
      - ./kong-data:/deck
    entrypoint: >
      /bin/sh -c "
      apk add --no-cache curl &&
      until curl --silent --fail http://kong:8001/status; do
        echo 'Waiting for Kong Admin API...';
        sleep 2;
      done;
      echo 'Kong is up! Syncing configuration...';
      deck sync --state /deck/kong.yaml --kong-addr http://kong:8001"
    depends_on:
      - kong
    networks:
      - grabOrgan-net

  rabbitmq:
    image: rabbitmq:3-management
    hostname: grabOrgan-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - grabOrgan-net
  activity_log:
    build:
      context: .
      dockerfile: atomic/ActivityLog/Dockerfile.activity.log
    image: GrabOrgan/activity_log:1.0

    ports:
      - "5001:5001"
    environment:
      - rabbit_host=rabbitmq # The name of the RabbitMQ container defined in the RabbitMQ compose file
      - rabbit_port=5672
      - exchange_name=activity_log_exchange
      - exchange_type=topic
      - queue_name=activity_log_queue
      - routing_key=*.info
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/usr/src/app
    depends_on:
      - rabbitmq
    networks:
      - grabOrgan-net
    volumes:
      - ./common:/usr/src/app/common # Shared volume for common code
    command: ["python", "activity_log.py"]
    restart: always
  azure_email:
    build:
      context: .
      dockerfile: atomic/AzureEmail/Dockerfile.azure.email
    image: GrabOrgan/azure_email:1.0
    ports:
      - "5014:5014"
    environment:
      - AZURE_CONNECTION_STRING=${AZURE_CONNECTION_STRING}
      - PYTHONPATH=/usr/src/app
      - PYTHONUNBUFFERED=1
    networks:
      - grabOrgan-net
    command: ["python", "azure_email.py"]
    restart: always

  delivery_info:
    build:
      context: atomic/Delivery/.
      dockerfile: Dockerfile.deliveryinfo
    image: GrabOrgan/deliveryinfo:1.0
    volumes:
      - ./secrets/delivery/delivery_Key.json:/usr/src/app/delivery_Key.json:ro
    environment:
      - DELIVERY_DB_KEY=/usr/src/app/delivery_Key.json
      - PYTHONUNBUFFERED=1
    container_name: delivery_service
    ports:
      - "5002:5002"
    networks:
      - grabOrgan-net
    depends_on:
      - kong
    # restart: always

  donor:
    build:
      context: atomic/Donor/.
      dockerfile: Dockerfile.donor
    image: GrabOrgan/donor:1.0
    volumes:
      - ./secrets/Donor/Donor_Key.json:/usr/src/app/Donor_Key.json:ro
    environment:
      - DONOR_DB_KEY=/usr/src/app/Donor_Key.json
    container_name: donor_service
    ports:
      - "5003:5003"
    networks:
      - grabOrgan-net
    depends_on:
      - kong
    # restart: always

  driverInfo:
    build:
      context: atomic/DriverInfo/.
      dockerfile: Dockerfile.driverInfo
    image: GrabOrgan/driverinfo:1.0
    volumes:
      - ./secrets/driverInfo/driver_Key.json:/usr/src/app/driverInfo_Key.json:ro
    environment:
      - DRIVERINFO_DB_KEY=/usr/src/app/driverInfo_Key.json
    container_name: driverInfo_service
    ports:
      - "5004:5004"
    networks:
      - grabOrgan-net
    depends_on:
      - kong
  error:
    build:
      context: .
      dockerfile: atomic/Error/Dockerfile.error
    image: GrabOrgan/error:1.0

    container_name: error_service
    ports:
      - "5005:5005"
    environment:
      - rabbit_host=rabbitmq # The name of the RabbitMQ container defined in the RabbitMQ compose file
      - rabbit_port=5672
      - exchange_name=error_handling_exchange
      - exchange_type=topic
      - queue_name=error_queue
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/usr/src/app
    depends_on:
      - rabbitmq
    networks:
      - grabOrgan-net
    volumes:
      - ./common:/usr/src/app/common # Shared volume for common code
    command: ["python", "error.py"]
    restart: always

  geoalgo:
    build:
      context: atomic/GeoAlgo/.
      dockerfile: dockerfile.geoalgo
    image: GrabOrgan/geoalgo:1.0
    container_name: geoalgo_service
    ports:
      - "5006:5006"
    networks:
      - grabOrgan-net
    depends_on:
      - kong
    # restart: always

  labInfo:
    build:
      context: atomic/LabInfo/.
      dockerfile: Dockerfile.lab_report
    image: GrabOrgan/labinfo:1.0
    volumes:
      - ./secrets/LabInfo/Lab_Info_Key.json:/usr/src/app/Lab_Info_Key.json:ro
    environment:
      - LABINFO_DB_KEY=/usr/src/app/Lab_Info_Key.json
    container_name: lab_info_service
    ports:
      - "5007:5007"
    networks:
      - grabOrgan-net
    depends_on:
      - kong
    # restart: always

  match:
    build:
      context: atomic/Match/.
      dockerfile: Dockerfile.match
    image: GrabOrgan/match:1.0
    volumes:
      - ./secrets/Match/Match_Key.json:/usr/src/app/Match_Key.json:ro
    environment:
      - MATCH_DB_KEY=/usr/src/app/Match_Key.json
    container_name: match_service
    ports:
      - "5008:5008"
    networks:
      - grabOrgan-net
    depends_on:
      - kong
    # restart: always
  send_notification:
    build:
      context: .
      dockerfile: composite/SendNotification/Dockerfile.notification
    image: GrabOrgan/send_notification:1.0

    ports:
      - "5027:5027"
    environment:
      - rabbit_host=rabbitmq # The name of the RabbitMQ container defined in the RabbitMQ compose file
      - rabbit_port=5672
      - email_subdomain=DoNotReply@c4de2af4-af42-4134-8003-492f444c8562.azurecomm.net
      - AZURE_EMAIL_URL=http://azure_email:5014/email
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/usr/src/app
    depends_on:
      - rabbitmq
      - azure_email
    networks:
      - grabOrgan-net
    volumes:
      - ./common:/usr/src/app/common # Shared volume for common code
    command: ["python", "send_notification.py"]
    restart: always

  order:
    build:
      context: atomic/Order/.
      dockerfile: Dockerfile.order
    image: GrabOrgan/order:1.0
    volumes:
      - ./secrets/order/Order_Key.json:/usr/src/app/Order_Key.json:ro
    environment:
      - ORDER_DB_KEY=/usr/src/app/Order_Key.json
    container_name: order_service
    ports:
      - "5009:5009"
    networks:
      - grabOrgan-net
    depends_on:
      - kong
    # restart: always

  organ:
    build:
      context: atomic/Organ/.
      dockerfile: Dockerfile.organ
    image: GrabOrgan/organ:1.0
    volumes:
      - ./secrets/organ/organ_Key.json:/usr/src/app/secrets/organ_Key.json:ro
    environment:
      - ORGAN_DB_KEY=/usr/src/app/secrets/organ_Key.json
    ports:
      - "5010:5010"
    container_name: organ_service
    networks:
      - grabOrgan-net
    depends_on:
      - kong
    # restart: always

  personalData:
    build:
      context: atomic/PersonalData/.
      dockerfile: Dockerfile.personal.data
    image: GrabOrgan/personaldata:1.0
    volumes:
      - ./secrets/PersonalData/PersonalData_Key.json:/usr/src/app/PersonalData_Key.json:ro
    environment:
      - PERSONAL_DATA_DB_KEY=/usr/src/app/PersonalData_Key.json
    container_name: personal_data_service
    ports:
      - "5011:5011"
    networks:
      - grabOrgan-net
    depends_on:
      - kong
    # restart: always

  pseudonym:
    build:
      context: atomic/Pseudonym/.
      dockerfile: Dockerfile.pseudonym
    image: GrabOrgan/pseudonym:1.0
    container_name: pseudonym_service
    ports:
      - "5012:5012"
    networks:
      grabOrgan-net:
    depends_on:
      - kong

  recipient:
    build:
      context: atomic/Recipient/.
      dockerfile: Dockerfile.recipient
    image: GrabOrgan/recipient:1.0
    volumes:
      - ./secrets/recipient/recipient_Key.json:/usr/src/app/secrets/recipient_Key.json:ro
    environment:
      - RECIPIENT_DB_KEY=/usr/src/app/secrets/recipient_Key.json
    ports:
      - "5013:5013"
    container_name: recipient_service
    networks:
      - grabOrgan-net
    depends_on:
      - kong
    # restart: always

  createDelivery:
    build:
      context: ./composite/createDelivery/.
      dockerfile: dockerfile.createdelivery
    image: GrabOrgan/createdelivery:1.0
    # restart: always
    container_name: createDelivery
    environment:
      - PYTHONUNBUFFERED=1
      - rabbit_host=rabbitmq # The name of the RabbitMQ container defined in the RabbitMQ compose file
      - rabbit_port=5672
    ports:
      - "5026:5026"
    networks:
      - grabOrgan-net
    depends_on:
      - rabbitmq
      - kong
      - activity_log
      - error
      - delivery_info
    command: ["python", "createDelivery.py"]
    volumes:
      - ./common:/usr/src/app/common # Shared volume for common code
  selectDriver:
    build:
      context: ./composite/selectDriver/.
      dockerfile: dockerfile.selectDriver
    image: GrabOrgan/selecdriver:1.0
    # restart: always
    container_name: selectDriver
    environment:
      - PYTHONUNBUFFERED=1
      - rabbit_host=rabbitmq # The name of the RabbitMQ container defined in the RabbitMQ compose file
      - rabbit_port=5672
    ports:
      - "5024:5024"
    networks:
      - grabOrgan-net
    depends_on:
      - rabbitmq
      - kong
      - activity_log
      - error
      - delivery_info
      - driverInfo
      - send_notification
    volumes:
      - ./common:/usr/src/app/common # Shared volume for common code
  trackDelivery:
    build:
      context: ./composite/trackDelivery/.
      dockerfile: dockerfile.trackDelivery
    image: GrabOrgan/trackdelivery:1.0
    # restart: always
    container_name: trackDelivery
    environment:
      - PYTHONUNBUFFERED=1
      - rabbit_host=rabbitmq # The name of the RabbitMQ container defined in the RabbitMQ compose file
      - rabbit_port=5672
    ports:
      - "5025:5025"
    networks:
      - grabOrgan-net
    depends_on:
      - rabbitmq
      - kong
      - activity_log
      - error
      - delivery_info
      - geoalgo
      - driverInfo
    volumes:
      - ./common:/usr/src/app/common # Shared volume for common code

  endDelivery:
    build:
      context: ./composite/endDelivery
      dockerfile: dockerfile.endDelivery
    image: GrabOrgan/enddelivery:1.0
    # restart: always
    container_name: endDelivery
    environment:
      - rabbit_host=rabbitmq # The name of the RabbitMQ container defined in the RabbitMQ compose file
      - rabbit_port=5672
    ports:
      - "5028:5028"
    depends_on:
      - rabbitmq
      - kong
      - activity_log
      - error
      - delivery_info
      - driverInfo
    networks:
      - grabOrgan-net
    volumes:
      - ./common:/usr/src/app/common # Shared volume for common code

  request_organ:
    build:
      context: .
      dockerfile: composite/requestOrgan/Dockerfile
    image: GrabOrgan/request_organ:1.0
    container_name: request_organ_service
    ports:
      - "5021:5021"
    environment:
      - PERSONAL_DATA_URL=http://personalData:5011/person
      - PSEUDONYM_URL=http://pseudonym:5012/pseudonymise
      - RECIPIENT_URL=http://recipient:5013/recipient
      - LAB_REPORT_URL=http://labInfo:5007/lab-reports
      - OUTSYSTEMS_PERSONAL_DATA_URL=https://personal-gbst4bsa.outsystemscloud.com/PatientAPI/rest/patientAPI/patients/
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_EXCHANGE=request_organ_exchange
      - RABBITMQ_ROUTING_KEY=match.request
      - PYTHONPATH=/usr/src/app
      - PYTHONUNBUFFERED=1
    depends_on:
      - rabbitmq
      - kong
      - personalData
      - pseudonym
      - recipient
      - labInfo
      - activity_log
      - error
    networks:
      - grabOrgan-net
    volumes:
      - ./common:/usr/src/app/common # Shared volume for common code
    command: ["python", "request_organ.py"]

  match_organ:
    build:
      context: .
      dockerfile: composite/MatchOrgan/Dockerfile.match.organ
    image: GrabOrgan/match_organ:1.0
    environment:
      - rabbit_host=rabbitmq # The name of the RabbitMQ container defined in the RabbitMQ compose file
      - rabbit_port=5672
      - RECIPIENT_URL=http://recipient:5013/recipient
      - DONOR_URL=http://donor:5003/donor
      - ORGAN_URL=http://organ:5010/organ
      - MATCH_URL=http://match:5008/matches
      - ORDER_URL=http://order:5009/order
      # - PYTHONPATH=/usr/src/app:/usr/src/app/common # Equivalent to export PYTHONPATH
      - PYTHONPATH=/usr/src/app
      - PYTHONUNBUFFERED=1
    ports:
      - "5020:5020"
    depends_on:
      - rabbitmq
      - kong
      - activity_log
      - error
      - recipient
      - donor
      - match
      - organ

    container_name: match_organ_service
    networks:
      - grabOrgan-net
    volumes:
      - ./common:/usr/src/app/common # Shared volume for common code
    # restart: always
    command: ["python", "match_organ.py"]

  test_compatibility:
    build:
      context: .
      dockerfile: composite/TestCompatibility/Dockerfile.test.compatibility
    container_name: "test_compatibility"
    #volumes map to secret key
    environment:
      - rabbit_host=rabbitmq # The name of the RabbitMQ container defined in the RabbitMQ compose file
      - rabbit_port=5672
      - LAB_INFO_URL=http://labInfo:5007/lab-reports
      - MATCH_URL=http://match:5008/matches
      - RECIPIENT_URL=http://recipient:5013/recipient
      - ORGAN_URL=http://organ:5010/organ
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/usr/src/app

    depends_on:
      - rabbitmq
      - kong
      - recipient
      - labInfo
      - match

    networks:
      - grabOrgan-net
    ports:
      - "5022:5022"
    volumes:
      - ./common:/usr/src/app/common # Shared volume for common code
    command: ["python", "test_compatibility.py"]
