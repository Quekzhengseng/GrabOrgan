volumes:
  rabbitmq_data:
    name: grabOrgan_rabbitmq_data

networks:
  grabOrgan-net:
    driver: bridge
    name: grabOrgan-net

services:
  rabbitmq:
    image: rabbitmq:3-management
    hostname: grabOrgan-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - grabOrgan-net
  activity_log:
    build:
      context: .
      dockerfile: atomic/ActivityLog/Dockerfile.activity.log
    image: GrabOrgan/activity_log:1.0

    ports:
      - "5001:5001"
    environment:
      - rabbit_host=rabbitmq # The name of the RabbitMQ container defined in the RabbitMQ compose file
      - rabbit_port=5672
      - exchange_name=activity_log_exchange
      - exchange_type=topic
      - queue_name=activity_log_queue
      - routing_key=*.info
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/usr/src/app
    depends_on:
      - rabbitmq
    networks:
      - grabOrgan-net
    volumes:
      - ./common:/usr/src/app/common # Shared volume for common code
    command: ["python", "activity_log.py"]
    restart: always

  delivery_info:
    build:
      context: atomic/Delivery/.
      dockerfile: Dockerfile.deliveryinfo
    image: GrabOrgan/deliveryinfo:1.0
    volumes:
      - ./secrets/delivery/delivery_Key.json:/usr/src/app/delivery_Key.json:ro
    environment:
      - DELIVERY_DB_KEY=/usr/src/app/delivery_Key.json
      - PYTHONUNBUFFERED=1
    container_name: delivery_service
    ports:
      - "5002:5002"
    networks:
      - grabOrgan-net
    # restart: always

  donor:
    build:
      context: atomic/Donor/.
      dockerfile: Dockerfile.donor
    image: GrabOrgan/donor:1.0
    volumes:
      - ./secrets/Donor/Donor_Key.json:/usr/src/app/Donor_Key.json:ro
    environment:
      - DONOR_DB_KEY=/usr/src/app/Donor_Key.json
    container_name: donor_service
    ports:
      - "5003:5003"
    networks:
      - grabOrgan-net
    # restart: always

  driverInfo:
    build:
      context: atomic/DriverInfo/.
      dockerfile: Dockerfile.driverInfo
    image: GrabOrgan/driverinfo:1.0
    volumes:
      - ./secrets/driverInfo/driver_Key.json:/usr/src/app/driverInfo_Key.json:ro
    environment:
      - DRIVERINFO_DB_KEY=/usr/src/app/driverInfo_Key.json
    container_name: driverInfo_service
    ports:
      - "5004:5004"
    networks:
      - grabOrgan-net
  error:
    build:
      context: .
      dockerfile: atomic/Error/Dockerfile.error
    image: GrabOrgan/error:1.0

    container_name: error_service
    ports:
      - "5005:5005"
    environment:
      - rabbit_host=rabbitmq # The name of the RabbitMQ container defined in the RabbitMQ compose file
      - rabbit_port=5672
      - exchange_name=error_handling_exchange
      - exchange_type=topic
      - queue_name=error_queue
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/usr/src/app
    depends_on:
      - rabbitmq
    networks:
      - grabOrgan-net
    volumes:
      - ./common:/usr/src/app/common # Shared volume for common code
    command: ["python", "error.py"]
    restart: always

  geoalgo:
    build:
      context: atomic/GeoAlgo/.
      dockerfile: dockerfile.geoalgo
    image: GrabOrgan/geoalgo:1.0
    container_name: geoalgo_service
    ports:
      - "5006:5006"
    networks:
      - grabOrgan-net
    # restart: always

  labInfo:
    build:
      context: atomic/LabInfo/.
      dockerfile: Dockerfile.lab_report
    image: GrabOrgan/labinfo:1.0
    volumes:
      - ./secrets/LabInfo/Lab_Info_Key.json:/usr/src/app/Lab_Info_Key.json:ro
    environment:
      - LABINFO_DB_KEY=/usr/src/app/Lab_Info_Key.json
    container_name: lab_info_service
    ports:
      - "5007:5007"
    networks:
      - grabOrgan-net
    # restart: always

  match:
    build:
      context: atomic/Match/.
      dockerfile: Dockerfile.match
    image: GrabOrgan/match:1.0
    volumes:
      - ./secrets/Match/Match_Key.json:/usr/src/app/Match_Key.json:ro
    environment:
      - MATCH_DB_KEY=/usr/src/app/Match_Key.json
    container_name: match_service
    ports:
      - "5008:5008"
    networks:
      - grabOrgan-net
    # restart: always

  order:
    build:
      context: atomic/Order/.
      dockerfile: Dockerfile.order
    image: GrabOrgan/order:1.0
    volumes:
      - ./secrets/order/Order_Key.json:/usr/src/app/Order_Key.json:ro
    environment:
      - ORDER_DB_KEY=/usr/src/app/Order_Key.json
    container_name: order_service
    ports:
      - "5009:5009"
    networks:
      - grabOrgan-net
    # restart: always

  organ:
    build:
      context: atomic/Organ/.
      dockerfile: Dockerfile.organ
    image: GrabOrgan/organ:1.0
    volumes:
      - ./secrets/organ/organ_Key.json:/usr/src/app/secrets/organ_Key.json:ro
    environment:
      - ORGAN_DB_KEY=/usr/src/app/secrets/organ_Key.json
    ports:
      - "5010:5010"
    container_name: organ_service
    networks:
      - grabOrgan-net
    # restart: always

  personalData:
    build:
      context: atomic/PersonalData/.
      dockerfile: Dockerfile.personal.data
    image: GrabOrgan/personaldata:1.0
    volumes:
      - ./secrets/PersonalData/PersonalData_Key.json:/usr/src/app/PersonalData_Key.json:ro
    environment:
      - PERSONAL_DATA_DB_KEY=/usr/src/app/PersonalData_Key.json
    container_name: personal_data_service
    ports:
      - "5011:5011"
    networks:
      - grabOrgan-net
    # restart: always

  pseudonym:
    build:
      context: atomic/Pseudonym/.
      dockerfile: Dockerfile.pseudonym
    image: GrabOrgan/pseudonym:1.0
    container_name: pseudonym_service
    ports:
      - "5012:5012"
    networks:
      grabOrgan-net:
        aliases:
          - pseudonym
          - pseudonym_service

  recipient:
    build:
      context: atomic/Recipient/.
      dockerfile: Dockerfile.recipient
    image: GrabOrgan/recipient:1.0
    volumes:
      - ./secrets/recipient/recipient_Key.json:/usr/src/app/secrets/recipient_Key.json:ro
    environment:
      - RECIPIENT_DB_KEY=/usr/src/app/secrets/recipient_Key.json
    ports:
      - "5013:5013"
    container_name: recipient_service
    networks:
      - grabOrgan-net
    # restart: always

  createDelivery:
    build:
      context: ./composite/createDelivery/.
      dockerfile: dockerfile.createdelivery
    image: GrabOrgan/createdelivery:1.0
    # restart: always
    container_name: createDelivery
    environment:
      - PYTHONUNBUFFERED=1
    ports:
      - "5026:5026"
    networks:
      - grabOrgan-net
    command: ["python", "createDelivery.py"]

  selectDriver:
    build:
      context: ./composite/selectDriver/.
      dockerfile: dockerfile.selectDriver
    image: GrabOrgan/selecdriver:1.0
    # restart: always
    container_name: selectDriver
    environment:
      - PYTHONUNBUFFERED=1
    ports:
      - "5024:5024"
    networks:
      - grabOrgan-net

  trackDelivery:
    build:
      context: ./composite/trackDelivery/.
      dockerfile: dockerfile.trackDelivery
    image: GrabOrgan/trackdelivery:1.0
    # restart: always
    container_name: trackDelivery
    environment:
      - PYTHONUNBUFFERED=1
    ports:
      - "5025:5025"
    networks:
      - grabOrgan-net

  request_organ:
    build:
      context: ./composite/requestOrgan/.
      dockerfile: Dockerfile
    image: GrabOrgan/request_organ:1.0
    container_name: request_organ_service
    ports:
      - "5021:5021"
    environment:
      - PERSONAL_DATA_URL=http://personalData:5011/person
      - PSEUDONYM_URL=http://pseudonym:5012/pseudonymise
      - RECIPIENT_URL=http://recipient:5013/recipient
      - LAB_REPORT_URL=http://labInfo:5007/lab-reports
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_EXCHANGE=request_organ_exchange
      - RABBITMQ_ROUTING_KEY=match.request
      - PYTHONPATH=/usr/src/app
      - PYTHONUNBUFFERED=1
    depends_on:
      - personalData
      - pseudonym
      - recipient
      - labInfo
      - rabbitmq
    networks:
      - grabOrgan-net
    volumes:
      - ./common:/usr/src/app/common # Shared volume for common code
    command: ["python", "request_organ.py"]

  match_organ:
    build:
      context: .
      dockerfile: composite/MatchOrgan/Dockerfile.match.organ
    image: GrabOrgan/match_organ:1.0
    environment:
      - rabbit_host=rabbitmq # The name of the RabbitMQ container defined in the RabbitMQ compose file
      - rabbit_port=5672
      - RECIPIENT_URL=http://recipient:5013/recipient
      - DONOR_URL=http://donor:5003/donor
      - ORGAN_URL=http://organ:5010/organ
      - MATCH_URL=http://match:5008/matches
      # - PYTHONPATH=/usr/src/app:/usr/src/app/common # Equivalent to export PYTHONPATH
      - PYTHONPATH=/usr/src/app
      - PYTHONUNBUFFERED=1
    ports:
      - "5020:5020"
    depends_on:
      - rabbitmq
      - activity_log
      - error
      - recipient
      - donor
      - match
      - organ
      - request_organ
    container_name: match_organ_service
    networks:
      - grabOrgan-net
    volumes:
      - ./common:/usr/src/app/common # Shared volume for common code
    # restart: always
    command: ["python", "match_organ.py"]

  test_compatibility:
    build:
      context: .
      dockerfile: composite/TestCompatibility/Dockerfile.test.compatibility
    container_name: "test_compatibility"
    #volumes map to secret key
    environment:
      - rabbit_host=rabbitmq # The name of the RabbitMQ container defined in the RabbitMQ compose file
      - rabbit_port=5672
      - LAB_INFO_URL=http://labInfo:5007/lab-reports
      - MATCH_SERVICE_URL=http://match:5008/matches
      - RECIPIENT_URL=http://recipient:5013/recipient
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/usr/src/app

    depends_on:
      - recipient
      - labInfo
      - match
      - match_organ

    networks:
      - grabOrgan-net
    ports:
      - "5022:5022"
    volumes:
      - ./common:/usr/src/app/common # Shared volume for common code
    command: ["python", "test_compatibility.py"]
